generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider  = "prisma-dbml-generator"
  outputDir = "../db"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String               @map("password_hash")
  firstName           String?
  lastName            String?
  createdAt           DateTime             @default(now()) @db.Timestamp(6)
  updatedAt           DateTime             @default(now()) @db.Timestamp(6)
  balances            Balance[]
  resetPasswordTokens ResetPasswordToken[] @relation("UserResetTokens")
  transactions        Transaction[]
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserResetTokens", fields: [userId], references: [id])
}

model Balance {
  id        String   @id @default(uuid())
  userId    String
  value     Float
  currency  Currency @default(USD)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Transaction {
  id        String            @id @default(uuid())
  userId    String
  status    TransactionStatus
  type      TransactionType
  amount    Float
  currency  Currency
  createdAt DateTime          @default(now()) @db.Timestamp(6)
  updatedAt DateTime          @default(now()) @db.Timestamp(6)
  user      User              @relation(fields: [userId], references: [id])
}

model Price {
  id        String   @id @default(uuid())
  currency  Currency
  value     Float    @map("price")
  updatedAt DateTime @default(now()) @db.Timestamp(6)
}

model Cryptocurrency {
  id                 Int                   @id @default(autoincrement())
  name               String
  symbol             String
  slug               String
  cmc_rank           Int?
  num_market_pairs   Int?
  circulating_supply Float?
  total_supply       Float?
  max_supply         Float?
  infinite_supply    Boolean?
  last_updated       DateTime?
  date_added         DateTime?
  tags               Json?
  platform           String?
  quotes             CryptocurrencyQuote[] @relation("CryptocurrencyQuotes")
}

model CryptocurrencyQuote {
  id                       Int            @id @default(autoincrement())
  cryptocurrencyId         Int
  currency                 String
  price                    Float?
  volume_24h               Float?
  volume_change_24h        Float?
  percent_change_1h        Float?
  percent_change_24h       Float?
  percent_change_7d        Float?
  market_cap               Float?
  market_cap_dominance     Float?
  fully_diluted_market_cap Float?
  last_updated             DateTime?
  cryptocurrency           Cryptocurrency @relation("CryptocurrencyQuotes", fields: [cryptocurrencyId], references: [id])
}

model TickerPrice {
  id        Int      @id @default(autoincrement())
  symbol    String   @unique
  price     Float
  updatedAt DateTime @updatedAt
}

model Kline {
  id             Int      @id @default(autoincrement())
  symbol         String
  volume         Float
  closePrice     Float
  closeTime      DateTime
  highPrice      Float
  isFinal        Boolean
  lowPrice       Float
  numberOfTrades Int
  openPrice      Float
  openTime       DateTime
  quoteVolume    Float

  @@index([symbol, openTime])
}


enum TransactionStatus {
  pending
  completed
  failed
}

enum TransactionType {
  deposit
  withdrawal
  trade
  transfer
}

enum Currency {
  USD
  DASH
  XMR
  BCH
  LTC
  XRP
  XLM
  BTC
  BNB
  USDT
  ETH
  BUSD
  SOL
  DOT
  LINK
  CAKE
  CRO
  UNI
  AAVE
}
